%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% F = kf_calcDFx(x) Calculates the Jacobian of the system dynamics equation f(x,u,t) 
%   
%   Author: C.C. de Visser, Delft University of Technology, 2013
%   email: c.c.devisser@tudelft.nl
%   Version: 1.0
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function DFx = kf_calcDFx(t, x, U)

    g= 9.7897; %gravitywgs84(7500, 52+23/60);
    u = x(4); v = x(5); w = x(6);
    phi = x(7); theta = x(8); psi = x(9); 
    lp = x(16); lq = x(17); lr = x(18);
    p = U(4); q = U(5); r = U(6);

    DFx =  [0, 0, 0, cos(psi)*cos(theta), cos(psi)*sin(phi)*sin(theta) - cos(phi)*sin(psi), sin(phi)*sin(psi) + cos(phi)*cos(psi)*sin(theta), sin(psi)*(w*cos(phi) + v*sin(phi)) + cos(psi)*sin(theta)*(v*cos(phi) - w*sin(phi)),                             -cos(psi)*(u*sin(theta) - cos(theta)*(w*cos(phi) + v*sin(phi))), - sin(psi)*(sin(theta)*(w*cos(phi) + v*sin(phi)) + u*cos(theta)) - cos(psi)*(v*cos(phi) - w*sin(phi)), 1, 0, 0,  0,  0,  0,  0,                    0,                    0;
            0, 0, 0, cos(theta)*sin(psi), cos(phi)*cos(psi) + sin(phi)*sin(psi)*sin(theta), cos(phi)*sin(psi)*sin(theta) - cos(psi)*sin(phi), sin(psi)*sin(theta)*(v*cos(phi) - w*sin(phi)) - cos(psi)*(w*cos(phi) + v*sin(phi)),                             -sin(psi)*(u*sin(theta) - cos(theta)*(w*cos(phi) + v*sin(phi))),   cos(psi)*(sin(theta)*(w*cos(phi) + v*sin(phi)) + u*cos(theta)) - sin(psi)*(v*cos(phi) - w*sin(phi)), 0, 1, 0,  0,  0,  0,  0,                    0,                    0;
            0, 0, 0,         -sin(theta),                              cos(theta)*sin(phi),                              cos(phi)*cos(theta),                                               cos(theta)*(v*cos(phi) - w*sin(phi)),                                       - sin(theta)*(w*cos(phi) + v*sin(phi)) - u*cos(theta),                                                                                                     0, 0, 0, 1,  0,  0,  0,  0,                    0,                    0;
            0, 0, 0,                   0,                                           r - lr,                                           lq - q,                                                                                  0,                                                                               -g*cos(theta),                                                                                                     0, 0, 0, 0, -1,  0,  0,  0,                    w,                   -v;
            0, 0, 0,              lr - r,                                                0,                                           p - lp,                                                              g*cos(phi)*cos(theta),                                                                      -g*sin(phi)*sin(theta),                                                                                                     0, 0, 0, 0,  0, -1,  0, -w,                    0,                    u;
            0, 0, 0,              q - lq,                                           lp - p,                                                0,                                                             -g*cos(theta)*sin(phi),                                                                      -g*cos(phi)*sin(theta),                                                                                                     0, 0, 0, 0,  0,  0, -1,  v,                   -u,                    0;
            0, 0, 0,                   0,                                                0,                                                0,                        sin(phi)*tan(theta)*(lr - r) - cos(phi)*tan(theta)*(lq - q),               - cos(phi)*(lr - r)*(tan(theta)^2 + 1) - sin(phi)*(lq - q)*(tan(theta)^2 + 1),                                                                                                     0, 0, 0, 0,  0,  0,  0, -1, -sin(phi)*tan(theta), -cos(phi)*tan(theta);
            0, 0, 0,                   0,                                                0,                                                0,                                              cos(phi)*(lr - r) + sin(phi)*(lq - q),                                                                                           0,                                                                                                     0, 0, 0, 0,  0,  0,  0,  0,            -cos(phi),             sin(phi);
            0, 0, 0,                   0,                                                0,                                                0,                    (sin(phi)*(lr - r))/cos(theta) - (cos(phi)*(lq - q))/cos(theta), - (cos(phi)*sin(theta)*(lr - r))/cos(theta)^2 - (sin(phi)*sin(theta)*(lq - q))/cos(theta)^2,                                                                                                     0, 0, 0, 0,  0,  0,  0,  0, -sin(phi)/cos(theta), -cos(phi)/cos(theta);
            0, 0, 0,                   0,                                                0,                                                0,                                                                                  0,                                                                                           0,                                                                                                     0, 0, 0, 0,  0,  0,  0,  0,                    0,                    0;
            0, 0, 0,                   0,                                                0,                                                0,                                                                                  0,                                                                                           0,                                                                                                     0, 0, 0, 0,  0,  0,  0,  0,                    0,                    0;
            0, 0, 0,                   0,                                                0,                                                0,                                                                                  0,                                                                                           0,                                                                                                     0, 0, 0, 0,  0,  0,  0,  0,                    0,                    0;
            0, 0, 0,                   0,                                                0,                                                0,                                                                                  0,                                                                                           0,                                                                                                     0, 0, 0, 0,  0,  0,  0,  0,                    0,                    0;
            0, 0, 0,                   0,                                                0,                                                0,                                                                                  0,                                                                                           0,                                                                                                     0, 0, 0, 0,  0,  0,  0,  0,                    0,                    0;
            0, 0, 0,                   0,                                                0,                                                0,                                                                                  0,                                                                                           0,                                                                                                     0, 0, 0, 0,  0,  0,  0,  0,                    0,                    0;
            0, 0, 0,                   0,                                                0,                                                0,                                                                                  0,                                                                                           0,                                                                                                     0, 0, 0, 0,  0,  0,  0,  0,                    0,                    0;
            0, 0, 0,                   0,                                                0,                                                0,                                                                                  0,                                                                                           0,                                                                                                     0, 0, 0, 0,  0,  0,  0,  0,                    0,                    0;
            0, 0, 0,                   0,                                                0,                                                0,                                                                                  0,                                                                                           0,                                                                                                     0, 0, 0, 0,  0,  0,  0,  0,                    0,                    0];
 
end
